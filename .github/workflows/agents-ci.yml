name: AI Agents CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/agents/**'
      - 'packages/shared/**'
      - 'packages/queue/**'
      - 'packages/db/**'
      - '.github/workflows/agents-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'apps/agents/**'
      - 'packages/shared/**'
      - 'packages/queue/**'
      - 'packages/db/**'

env:
  NODE_ENV: test
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL_TEST }}
  SUPABASE_KEY: ${{ secrets.SUPABASE_KEY_TEST }}

jobs:
  test:
    name: Test AI Agents
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: brandpillar_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: |
          npm run build:shared
          npm run build:queue
          npm run build:agents

      - name: Run unit tests
        run: |
          cd apps/agents
          npm run test:unit

      - name: Run integration tests
        run: |
          cd apps/agents
          npm run test:integration
        env:
          RABBITMQ_URL: amqp://localhost:5672
          REDIS_URL: redis://localhost:6379

      - name: Run load tests
        run: |
          cd apps/agents
          npm run test:load
        env:
          RABBITMQ_URL: amqp://localhost:5672
          REDIS_URL: redis://localhost:6379

      - name: Generate coverage report
        run: |
          cd apps/agents
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/agents/coverage/lcov.info
          flags: agents
          name: agents-coverage

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          cd apps/agents
          npx eslint src --ext .ts

      - name: Check TypeScript
        run: |
          cd apps/agents
          npx tsc --noEmit

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --production

      - name: Run Snyk security test
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/agents/Dockerfile
          push: true
          tags: |
            brandpillar/ai-agents:latest
            brandpillar/ai-agents:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy to Railway Staging
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_STAGING }}
        run: |
          railway up --service ai-agents --environment staging

      - name: Run smoke tests
        run: |
          ./scripts/smoke-test-agents.sh staging
        env:
          STAGING_URL: ${{ secrets.STAGING_AGENTS_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy to Railway Production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PRODUCTION }}
        run: |
          railway up --service ai-agents --environment production

      - name: Verify deployment
        run: |
          ./scripts/verify-agents-deployment.sh production
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_AGENTS_URL }}

      - name: Notify Slack on success
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "AI Agents deployed to production successfully! üöÄ",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "Author", "value": "${{ github.actor }}", "short": true},
                  {"title": "Branch", "value": "${{ github.ref }}", "short": true}
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "AI Agents deployment to production failed! ‚ùå",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "Author", "value": "${{ github.actor }}", "short": true},
                  {"title": "Branch", "value": "${{ github.ref }}", "short": true}
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}