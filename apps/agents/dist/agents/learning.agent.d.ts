import { BaseAgent } from '../framework/base-agent';
import { Task } from '@brandpillar/shared';
export declare class LearningAgent extends BaseAgent {
    private supabase;
    private redis;
    private performanceTracker;
    private readonly LEARNING_INTERVAL;
    private readonly MIN_DATA_POINTS;
    private readonly IMPROVEMENT_THRESHOLD;
    private metricsCache;
    private learningTimer?;
    constructor();
    initialize(): Promise<void>;
    processTask(task: Task): Promise<any>;
    validateTask(task: Task): Promise<boolean>;
    private analyzePerformance;
    private optimizeAgent;
    private generateInsights;
    private updateModels;
    private optimizeSystem;
    private analyzeExperiment;
    private startLearningCycle;
    private runPeriodicLearning;
    private loadHistoricalData;
    private fetchPerformanceData;
    private parseDuration;
    private identifyPatterns;
    private analyzeTemporalPatterns;
    private analyzeContentPatterns;
    private analyzeBehaviorPatterns;
    private calculatePerformanceMetrics;
    private detectAnomalies;
    private generateRecommendations;
    private sendOptimizationUpdate;
    private getTopEntries;
    private getBottomEntries;
    private getAgentPerformance;
    private identifyOptimizations;
    private generateOptimizationUpdate;
    private applyOptimization;
    private collectSystemMetrics;
    private getResourceMetrics;
    private analyzeAllAgents;
    private calculateTrends;
    private calculateAverageDuration;
    private comparePeriods;
    private identifyIssues;
    private identifyBottlenecks;
    private findOpportunities;
    private generateSystemRecommendations;
    private calculateSystemHealth;
    private analyzePerformanceTrends;
    private validateModelUpdates;
    private applyModelUpdates;
    private testUpdatedModel;
    private rollbackModelUpdates;
    private analyzeSystemState;
    private getAgentHealth;
    private identifyOptimizationTargets;
    private runOptimizationExperiment;
    private createOptimizationFromExperiment;
    private fetchExperimentData;
    private analyzeVariant;
    private calculateConfidence;
    private calculateSignificance;
    private updateMetricsCache;
    stop(): Promise<void>;
}
